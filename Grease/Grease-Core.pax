| package |
package := Package name: 'Grease-Core'.
package paxVersion: 1;
	basicComment: ''.


package classNames
	add: #GRBoundMessage;
	add: #GRCodec;
	add: #GRCodecStream;
	add: #GRCountingStream;
	add: #GRDelayedSend;
	add: #GRDelayedSendMessage;
	add: #GRDelegatingStream;
	add: #GRDeprecatedApiNotification;
	add: #GRError;
	add: #GRInflector;
	add: #GRInvalidArgumentCount;
	add: #GRInvalidUtf8Error;
	add: #GRMappedPrinter;
	add: #GRNotification;
	add: #GRNullCodec;
	add: #GRNullCodecStream;
	add: #GRNumberPrinter;
	add: #GRObject;
	add: #GROrderedMultiMap;
	add: #GROrdinalizePrinter;
	add: #GRPackage;
	add: #GRPlatform;
	add: #GRPluggablePrinter;
	add: #GRPrinter;
	add: #GRSequentialPrinter;
	add: #GRSignPrinter;
	add: #GRSmallDictionary;
	add: #GRStringPrinter;
	add: #GRUnboundMessage;
	add: #GRUnitPrinter;
	add: #GRUnsupportedEncodingError;
	add: #GRVersion;
	yourself.

package methodNames
	add: #Character -> #print:on:;
	add: #Integer -> #greaseInteger;
	add: #Integer -> #pluralize:;
	add: #Integer -> #pluralize:with:;
	add: #Number -> #greaseInteger;
	add: #Object -> #greaseDeprecatedApi:details:;
	add: #String -> #excerpt:;
	add: #String -> #excerpt:radius:;
	add: #String -> #excerpt:radius:ellipsis:;
	add: #String -> #greaseInteger;
	add: #String -> #pluralize;
	add: #String -> #print:on:;
	add: #String -> #truncate;
	add: #String -> #truncate:;
	add: #String -> #truncate:ellipsis:;
	add: #UndefinedObject -> #print:on:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: (IdentitySet new
	add: '..\Core\Object Arts\Dolphin\Base\Dolphin';
	yourself).

package!

"Class Definitions"!

Object subclass: #GRObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Error subclass: #GRError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRError subclass: #GRInvalidArgumentCount
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRError subclass: #GRInvalidUtf8Error
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRError subclass: #GRUnsupportedEncodingError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Notification subclass: #GRNotification
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRNotification subclass: #GRDeprecatedApiNotification
	instanceVariableNames: 'details'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRObject subclass: #GRCodec
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRObject subclass: #GRDelayedSend
	instanceVariableNames: 'receiver message'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRObject subclass: #GRDelayedSendMessage
	instanceVariableNames: 'selector'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRObject subclass: #GRDelegatingStream
	instanceVariableNames: 'stream'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRObject subclass: #GRInflector
	instanceVariableNames: ''
	classVariableNames: 'InflectionRules Uninflected'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRObject subclass: #GRPackage
	instanceVariableNames: 'name description dependencies license url'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRObject subclass: #GRPlatform
	instanceVariableNames: ''
	classVariableNames: 'Current'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRObject subclass: #GRPrinter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRObject subclass: #GRSmallDictionary
	instanceVariableNames: 'size keys values'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRObject subclass: #GRVersion
	instanceVariableNames: 'major minor revision stageLabel stageNumber'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRCodec subclass: #GRNullCodec
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRDelayedSendMessage subclass: #GRBoundMessage
	instanceVariableNames: 'arguments'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRDelayedSendMessage subclass: #GRUnboundMessage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRDelegatingStream subclass: #GRCodecStream
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRDelegatingStream subclass: #GRCountingStream
	instanceVariableNames: 'count'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRCodecStream subclass: #GRNullCodecStream
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRPrinter subclass: #GRMappedPrinter
	instanceVariableNames: 'next block'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRPrinter subclass: #GRNumberPrinter
	instanceVariableNames: 'characters base delimiter digits infinite nan padding accuracy precision separator'
	classVariableNames: 'NumbersToCharactersLowercase NumbersToCharactersUppercase'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRPrinter subclass: #GROrdinalizePrinter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRPrinter subclass: #GRPluggablePrinter
	instanceVariableNames: 'block'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRPrinter subclass: #GRSequentialPrinter
	instanceVariableNames: 'parts'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRPrinter subclass: #GRSignPrinter
	instanceVariableNames: 'negativePrinter positivePrinter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRPrinter subclass: #GRStringPrinter
	instanceVariableNames: 'trim length pad character'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRPrinter subclass: #GRUnitPrinter
	instanceVariableNames: 'integerPrinter fractionPrinter units base'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
GRSmallDictionary subclass: #GROrderedMultiMap
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!Character methodsFor!

print: anObject on: aStream	aStream nextPut: self! !
!Character categoriesFor: #print:on:!*grease/core!public! !

!Integer methodsFor!

greaseInteger	^ self!

pluralize: aSingularString 	^ self 		pluralize: aSingularString		with: (GRInflector pluralize: aSingularString)!

pluralize: aSingularString with: aPluralString	^ self printString , ' ' , (self abs = 1 ifTrue: [ aSingularString ] ifFalse: [ aPluralString ])! !
!Integer categoriesFor: #greaseInteger!*grease/core!public! !
!Integer categoriesFor: #pluralize:!*grease/core!public! !
!Integer categoriesFor: #pluralize:with:!*grease/core!public! !

!Number methodsFor!

greaseInteger	"Answer an integer of the receiver, in our case we simply truncate the number."	^ self truncated! !
!Number categoriesFor: #greaseInteger!*grease/core!public! !

!Object methodsFor!

greaseDeprecatedApi: apiString details: detailsString 	GRDeprecatedApiNotification new		details: detailsString;		signal: apiString! !
!Object categoriesFor: #greaseDeprecatedApi:details:!*grease/core!public! !

!String methodsFor!

excerpt: aString	"Answer an excerpt of the receiver that matches the first occurence of aString. If aString isn't found, nil is answered."		^ self excerpt: aString radius: 100!

excerpt: aString radius: anInteger	"Answer an excerpt of the receiver that matches the first occurence of aString. The radius anInteger expands the excerpt on each side of the first occurrence by the number of characters defined in radius. If aString isn't found, nil is answered."		^ self excerpt: aString radius: anInteger ellipsis: '...'!

excerpt: aString radius: anInteger ellipsis: anEllipsisString	"Answer an excerpt of the receiver that matches the first occurence of aString. The radius anInteger expands the excerpt on each side of the first occurrence by the number of characters defined in radius. If aString isn't found, nil is answered."	| index start stop |	(index := self indexOfSubCollection: aString) = 0		ifTrue: [ ^ nil ].	start := index - anInteger max: 1.	stop := index + anInteger + aString size - 1 min: self size.	^ (start > 1 ifTrue: [ anEllipsisString ] ifFalse: [ '' ]) ,		(self copyFrom: start to: stop) ,	  	(stop < self size ifTrue: [ anEllipsisString ] ifFalse: [ '' ])!

greaseInteger	"Convert the receiver to an integer, answer nil if this is not a number."	| number stream negated char |	number := nil.	stream := self readStream.	negated := stream peek = $-.	negated ifTrue: [ stream next ].	[ stream atEnd not and: [ (char := stream next) isDigit ] ] whileTrue: [		number := (number isNil  ifTrue: [ 0 ]ifFalse: [ 10 * number ])			+ (char greaseInteger - $0 greaseInteger) ].	^ (number isNil or: [ negated not ]) 		ifFalse: [ number negated ]		ifTrue: [ number ]!

pluralize	^ GRInflector pluralize: self!

print: anObject on: aStream	aStream nextPutAll: self!

truncate	"Truncate the receiver to 30 characters."		^ self truncate: 30!

truncate: anInteger	"Truncate the receiver to anInteger characters."		^ self truncate: anInteger ellipsis: '...'!

truncate: anInteger ellipsis: aString	"Truncate the receiver to anInteger characters and append aString as ellipsis if necessary."	^ anInteger < self size		ifTrue: [ (self copyFrom: 1 to: anInteger) , aString ]		ifFalse: [ self copy ]! !
!String categoriesFor: #excerpt:!*grease/core!public! !
!String categoriesFor: #excerpt:radius:!*grease/core!public! !
!String categoriesFor: #excerpt:radius:ellipsis:!*grease/core!public! !
!String categoriesFor: #greaseInteger!*grease/core!public! !
!String categoriesFor: #pluralize!*grease/core!public! !
!String categoriesFor: #print:on:!*grease/core!public! !
!String categoriesFor: #truncate!*grease/core!public! !
!String categoriesFor: #truncate:!*grease/core!public! !
!String categoriesFor: #truncate:ellipsis:!*grease/core!public! !

!UndefinedObject methodsFor!

print: anObject on: aStream! !
!UndefinedObject categoriesFor: #print:on:!*grease/core!public! !

"End of package definition"!

